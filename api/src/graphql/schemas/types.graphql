type RepositoryResponse {
    success: Boolean
    repository: Repository
    error: GraphError
}

type IssuesResponse {
    success: Boolean
    issues: Issues
    error: GraphError
}

type Issues {
    totalCount: Int
    pageInfo: PageInfoStatus
    nodes: [IssuesNode]
}

type PageInfoStatus {
    startCursor: String
    endCursor: String
    hasNextPage: Boolean
    hasPreviousPage: Boolean
}

type IssuesNode {
    id: String,
    title: String,
    number: Int,
    createdAt: String,
    author: GithubUser
}

type Repository {
    id: ID
    name: String
    owner: GithubUser
    createdAt: String
    totalIssues: CounterOnly
    openIssues: CounterOnly
    closedIssues: CounterOnly
    totalPullRequest: CounterOnly
    openPullRequest: CounterOnly
    closedPullRequest: CounterOnly
    mergedPullRequest: CounterOnly
}

type CounterOnly {
    totalCount: Int
}

type GithubUser {
    login: String
}

type GraphError {
    type: String
    message: String
}

enum CursorDirection {
    before
    after
}